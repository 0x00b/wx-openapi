/*
微信公众号素材相关接口

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package material

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
)

// MaterialApiService MaterialApi service
type MaterialApiService service

type ApiMaterialBatchgetMaterialPostRequest struct {
	ctx                     context.Context
	ApiService              *MaterialApiService
	accessToken             *string
	batchgetMaterialRequest *BatchgetMaterialRequest
}

// access_token
func (r ApiMaterialBatchgetMaterialPostRequest) AccessToken(accessToken string) ApiMaterialBatchgetMaterialPostRequest {
	r.accessToken = &accessToken
	return r
}

func (r ApiMaterialBatchgetMaterialPostRequest) BatchgetMaterialRequest(batchgetMaterialRequest BatchgetMaterialRequest) ApiMaterialBatchgetMaterialPostRequest {
	r.batchgetMaterialRequest = &batchgetMaterialRequest
	return r
}

func (r ApiMaterialBatchgetMaterialPostRequest) Execute() (*BatchgetMaterialResponse, *http.Response, error) {
	return r.ApiService.MaterialBatchgetMaterialPostExecute(r)
}

/*
MaterialBatchgetMaterialPost 素材管理 /获取素材列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiMaterialBatchgetMaterialPostRequest
*/
func (a *MaterialApiService) MaterialBatchgetMaterialPost(ctx context.Context) ApiMaterialBatchgetMaterialPostRequest {
	return ApiMaterialBatchgetMaterialPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BatchgetMaterialResponse
func (a *MaterialApiService) MaterialBatchgetMaterialPostExecute(r ApiMaterialBatchgetMaterialPostRequest) (*BatchgetMaterialResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BatchgetMaterialResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MaterialApiService.MaterialBatchgetMaterialPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/material/batchget_material"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accessToken == nil {
		return localVarReturnValue, nil, reportError("accessToken is required and must be specified")
	}
	if r.batchgetMaterialRequest == nil {
		return localVarReturnValue, nil, reportError("batchgetMaterialRequest is required and must be specified")
	}

	parameterAddToQuery(localVarQueryParams, "access_token", r.accessToken, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchgetMaterialRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMaterialGetMaterialPostRequest struct {
	ctx                context.Context
	ApiService         *MaterialApiService
	accessToken        *string
	getMaterialRequest *GetMaterialRequest
}

// access_token
func (r ApiMaterialGetMaterialPostRequest) AccessToken(accessToken string) ApiMaterialGetMaterialPostRequest {
	r.accessToken = &accessToken
	return r
}

func (r ApiMaterialGetMaterialPostRequest) GetMaterialRequest(getMaterialRequest GetMaterialRequest) ApiMaterialGetMaterialPostRequest {
	r.getMaterialRequest = &getMaterialRequest
	return r
}

func (r ApiMaterialGetMaterialPostRequest) Execute() (**os.File, *http.Response, error) {
	return r.ApiService.MaterialGetMaterialPostExecute(r)
}

/*
MaterialGetMaterialPost 素材管理 /获取永久素材

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiMaterialGetMaterialPostRequest
*/
func (a *MaterialApiService) MaterialGetMaterialPost(ctx context.Context) ApiMaterialGetMaterialPostRequest {
	return ApiMaterialGetMaterialPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *MaterialApiService) MaterialGetMaterialPostExecute(r ApiMaterialGetMaterialPostRequest) (**os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue **os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MaterialApiService.MaterialGetMaterialPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/material/get_material"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accessToken == nil {
		return localVarReturnValue, nil, reportError("accessToken is required and must be specified")
	}
	if r.getMaterialRequest == nil {
		return localVarReturnValue, nil, reportError("getMaterialRequest is required and must be specified")
	}

	parameterAddToQuery(localVarQueryParams, "access_token", r.accessToken, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"multipart/form-data"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.getMaterialRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
