/*
微信小程序相关接口

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package miniprogram

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
)

// MiniProgramAuthApiService MiniProgramAuthApi service
type MiniProgramAuthApiService service

type ApiCgiBinTokenGetRequest struct {
	ctx        context.Context
	ApiService *MiniProgramAuthApiService
	appid      *string
	secret     *string
	grantType  *string
}

// 小程序 appId
func (r ApiCgiBinTokenGetRequest) Appid(appid string) ApiCgiBinTokenGetRequest {
	r.appid = &appid
	return r
}

// 小程序 secret
func (r ApiCgiBinTokenGetRequest) Secret(secret string) ApiCgiBinTokenGetRequest {
	r.secret = &secret
	return r
}

// 授权类型，此处只需填写 client_credential
func (r ApiCgiBinTokenGetRequest) GrantType(grantType string) ApiCgiBinTokenGetRequest {
	r.grantType = &grantType
	return r
}

func (r ApiCgiBinTokenGetRequest) Execute() (*TokenRsp, *http.Response, error) {
	return r.ApiService.CgiBinTokenGetExecute(r)
}

/*
CgiBinTokenGet 获取小程序全局唯一后台接口调用凭据（access_token）。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCgiBinTokenGetRequest
*/
func (a *MiniProgramAuthApiService) CgiBinTokenGet(ctx context.Context) ApiCgiBinTokenGetRequest {
	return ApiCgiBinTokenGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TokenRsp
func (a *MiniProgramAuthApiService) CgiBinTokenGetExecute(r ApiCgiBinTokenGetRequest) (*TokenRsp, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TokenRsp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MiniProgramAuthApiService.CgiBinTokenGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cgi-bin/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appid == nil {
		return localVarReturnValue, nil, reportError("appid is required and must be specified")
	}
	if r.secret == nil {
		return localVarReturnValue, nil, reportError("secret is required and must be specified")
	}
	if r.grantType == nil {
		return localVarReturnValue, nil, reportError("grantType is required and must be specified")
	}

	parameterAddToQuery(localVarQueryParams, "appid", r.appid, "")
	parameterAddToQuery(localVarQueryParams, "secret", r.secret, "")
	parameterAddToQuery(localVarQueryParams, "grant_type", r.grantType, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSnsJscode2sessionGetRequest struct {
	ctx        context.Context
	ApiService *MiniProgramAuthApiService
	appid      *string
	secret     *string
	jsCode     *string
	grantType  *string
}

// 小程序 appId
func (r ApiSnsJscode2sessionGetRequest) Appid(appid string) ApiSnsJscode2sessionGetRequest {
	r.appid = &appid
	return r
}

// 小程序 secret
func (r ApiSnsJscode2sessionGetRequest) Secret(secret string) ApiSnsJscode2sessionGetRequest {
	r.secret = &secret
	return r
}

// 登录时获取的 code
func (r ApiSnsJscode2sessionGetRequest) JsCode(jsCode string) ApiSnsJscode2sessionGetRequest {
	r.jsCode = &jsCode
	return r
}

// 授权类型，此处只需填写 authorization_code
func (r ApiSnsJscode2sessionGetRequest) GrantType(grantType string) ApiSnsJscode2sessionGetRequest {
	r.grantType = &grantType
	return r
}

func (r ApiSnsJscode2sessionGetRequest) Execute() (*Jscode2sessionRsp, *http.Response, error) {
	return r.ApiService.SnsJscode2sessionGetExecute(r)
}

/*
SnsJscode2sessionGet 登录凭证校验。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSnsJscode2sessionGetRequest
*/
func (a *MiniProgramAuthApiService) SnsJscode2sessionGet(ctx context.Context) ApiSnsJscode2sessionGetRequest {
	return ApiSnsJscode2sessionGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Jscode2sessionRsp
func (a *MiniProgramAuthApiService) SnsJscode2sessionGetExecute(r ApiSnsJscode2sessionGetRequest) (*Jscode2sessionRsp, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Jscode2sessionRsp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MiniProgramAuthApiService.SnsJscode2sessionGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sns/jscode2session"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appid == nil {
		return localVarReturnValue, nil, reportError("appid is required and must be specified")
	}
	if r.secret == nil {
		return localVarReturnValue, nil, reportError("secret is required and must be specified")
	}
	if r.jsCode == nil {
		return localVarReturnValue, nil, reportError("jsCode is required and must be specified")
	}
	if r.grantType == nil {
		return localVarReturnValue, nil, reportError("grantType is required and must be specified")
	}

	parameterAddToQuery(localVarQueryParams, "appid", r.appid, "")
	parameterAddToQuery(localVarQueryParams, "secret", r.secret, "")
	parameterAddToQuery(localVarQueryParams, "js_code", r.jsCode, "")
	parameterAddToQuery(localVarQueryParams, "grant_type", r.grantType, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWxaGetwxacodeunlimitGetRequest struct {
	ctx                  context.Context
	ApiService           *MiniProgramAuthApiService
	accessToken          *string
	getwxacodeunlimitReq *GetwxacodeunlimitReq
}

// access_token
func (r ApiWxaGetwxacodeunlimitGetRequest) AccessToken(accessToken string) ApiWxaGetwxacodeunlimitGetRequest {
	r.accessToken = &accessToken
	return r
}

func (r ApiWxaGetwxacodeunlimitGetRequest) GetwxacodeunlimitReq(getwxacodeunlimitReq GetwxacodeunlimitReq) ApiWxaGetwxacodeunlimitGetRequest {
	r.getwxacodeunlimitReq = &getwxacodeunlimitReq
	return r
}

func (r ApiWxaGetwxacodeunlimitGetRequest) Execute() (**os.File, *http.Response, error) {
	return r.ApiService.WxaGetwxacodeunlimitGetExecute(r)
}

/*
WxaGetwxacodeunlimitGet 获取小程序全局唯一后台接口调用凭据（access_token）。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiWxaGetwxacodeunlimitGetRequest
*/
func (a *MiniProgramAuthApiService) WxaGetwxacodeunlimitGet(ctx context.Context) ApiWxaGetwxacodeunlimitGetRequest {
	return ApiWxaGetwxacodeunlimitGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *MiniProgramAuthApiService) WxaGetwxacodeunlimitGetExecute(r ApiWxaGetwxacodeunlimitGetRequest) (**os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue **os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MiniProgramAuthApiService.WxaGetwxacodeunlimitGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wxa/getwxacodeunlimit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accessToken == nil {
		return localVarReturnValue, nil, reportError("accessToken is required and must be specified")
	}
	if r.getwxacodeunlimitReq == nil {
		return localVarReturnValue, nil, reportError("getwxacodeunlimitReq is required and must be specified")
	}

	parameterAddToQuery(localVarQueryParams, "access_token", r.accessToken, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"multipart/form-data"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.getwxacodeunlimitReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
