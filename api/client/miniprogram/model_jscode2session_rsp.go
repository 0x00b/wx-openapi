/*
微信小程序相关接口

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package miniprogram

import (
	"encoding/json"
)

// checks if the Jscode2sessionRsp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Jscode2sessionRsp{}

// Jscode2sessionRsp struct for Jscode2sessionRsp
type Jscode2sessionRsp struct {
	// 返回码
	Errcode *int32 `json:"errcode,omitempty"`
	// 对返回码的文本描述内容
	Errmsg *string `json:"errmsg,omitempty"`
	// 用户唯一标识
	Openid *string `json:"openid,omitempty"`
	// 会话密钥
	SessionKey *string `json:"session_key,omitempty"`
	// 用户在开放平台的唯一标识符，若当前小程序已绑定到微信开放平台帐号下会返回，详见UnionID机制说明。
	Unionid *string `json:"unionid,omitempty"`
}

// NewJscode2sessionRsp instantiates a new Jscode2sessionRsp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJscode2sessionRsp() *Jscode2sessionRsp {
	this := Jscode2sessionRsp{}
	return &this
}

// NewJscode2sessionRspWithDefaults instantiates a new Jscode2sessionRsp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJscode2sessionRspWithDefaults() *Jscode2sessionRsp {
	this := Jscode2sessionRsp{}
	return &this
}

// GetErrcode returns the Errcode field value if set, zero value otherwise.
func (o *Jscode2sessionRsp) GetErrcode() int32 {
	if o == nil || isNil(o.Errcode) {
		var ret int32
		return ret
	}
	return *o.Errcode
}

// GetErrcodeOk returns a tuple with the Errcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jscode2sessionRsp) GetErrcodeOk() (*int32, bool) {
	if o == nil || isNil(o.Errcode) {
		return nil, false
	}
	return o.Errcode, true
}

// HasErrcode returns a boolean if a field has been set.
func (o *Jscode2sessionRsp) HasErrcode() bool {
	if o != nil && !isNil(o.Errcode) {
		return true
	}

	return false
}

// SetErrcode gets a reference to the given int32 and assigns it to the Errcode field.
func (o *Jscode2sessionRsp) SetErrcode(v int32) {
	o.Errcode = &v
}

// GetErrmsg returns the Errmsg field value if set, zero value otherwise.
func (o *Jscode2sessionRsp) GetErrmsg() string {
	if o == nil || isNil(o.Errmsg) {
		var ret string
		return ret
	}
	return *o.Errmsg
}

// GetErrmsgOk returns a tuple with the Errmsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jscode2sessionRsp) GetErrmsgOk() (*string, bool) {
	if o == nil || isNil(o.Errmsg) {
		return nil, false
	}
	return o.Errmsg, true
}

// HasErrmsg returns a boolean if a field has been set.
func (o *Jscode2sessionRsp) HasErrmsg() bool {
	if o != nil && !isNil(o.Errmsg) {
		return true
	}

	return false
}

// SetErrmsg gets a reference to the given string and assigns it to the Errmsg field.
func (o *Jscode2sessionRsp) SetErrmsg(v string) {
	o.Errmsg = &v
}

// GetOpenid returns the Openid field value if set, zero value otherwise.
func (o *Jscode2sessionRsp) GetOpenid() string {
	if o == nil || isNil(o.Openid) {
		var ret string
		return ret
	}
	return *o.Openid
}

// GetOpenidOk returns a tuple with the Openid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jscode2sessionRsp) GetOpenidOk() (*string, bool) {
	if o == nil || isNil(o.Openid) {
		return nil, false
	}
	return o.Openid, true
}

// HasOpenid returns a boolean if a field has been set.
func (o *Jscode2sessionRsp) HasOpenid() bool {
	if o != nil && !isNil(o.Openid) {
		return true
	}

	return false
}

// SetOpenid gets a reference to the given string and assigns it to the Openid field.
func (o *Jscode2sessionRsp) SetOpenid(v string) {
	o.Openid = &v
}

// GetSessionKey returns the SessionKey field value if set, zero value otherwise.
func (o *Jscode2sessionRsp) GetSessionKey() string {
	if o == nil || isNil(o.SessionKey) {
		var ret string
		return ret
	}
	return *o.SessionKey
}

// GetSessionKeyOk returns a tuple with the SessionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jscode2sessionRsp) GetSessionKeyOk() (*string, bool) {
	if o == nil || isNil(o.SessionKey) {
		return nil, false
	}
	return o.SessionKey, true
}

// HasSessionKey returns a boolean if a field has been set.
func (o *Jscode2sessionRsp) HasSessionKey() bool {
	if o != nil && !isNil(o.SessionKey) {
		return true
	}

	return false
}

// SetSessionKey gets a reference to the given string and assigns it to the SessionKey field.
func (o *Jscode2sessionRsp) SetSessionKey(v string) {
	o.SessionKey = &v
}

// GetUnionid returns the Unionid field value if set, zero value otherwise.
func (o *Jscode2sessionRsp) GetUnionid() string {
	if o == nil || isNil(o.Unionid) {
		var ret string
		return ret
	}
	return *o.Unionid
}

// GetUnionidOk returns a tuple with the Unionid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jscode2sessionRsp) GetUnionidOk() (*string, bool) {
	if o == nil || isNil(o.Unionid) {
		return nil, false
	}
	return o.Unionid, true
}

// HasUnionid returns a boolean if a field has been set.
func (o *Jscode2sessionRsp) HasUnionid() bool {
	if o != nil && !isNil(o.Unionid) {
		return true
	}

	return false
}

// SetUnionid gets a reference to the given string and assigns it to the Unionid field.
func (o *Jscode2sessionRsp) SetUnionid(v string) {
	o.Unionid = &v
}

func (o Jscode2sessionRsp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Jscode2sessionRsp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Errcode) {
		toSerialize["errcode"] = o.Errcode
	}
	if !isNil(o.Errmsg) {
		toSerialize["errmsg"] = o.Errmsg
	}
	if !isNil(o.Openid) {
		toSerialize["openid"] = o.Openid
	}
	if !isNil(o.SessionKey) {
		toSerialize["session_key"] = o.SessionKey
	}
	if !isNil(o.Unionid) {
		toSerialize["unionid"] = o.Unionid
	}
	return toSerialize, nil
}

type NullableJscode2sessionRsp struct {
	value *Jscode2sessionRsp
	isSet bool
}

func (v NullableJscode2sessionRsp) Get() *Jscode2sessionRsp {
	return v.value
}

func (v *NullableJscode2sessionRsp) Set(val *Jscode2sessionRsp) {
	v.value = val
	v.isSet = true
}

func (v NullableJscode2sessionRsp) IsSet() bool {
	return v.isSet
}

func (v *NullableJscode2sessionRsp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJscode2sessionRsp(val *Jscode2sessionRsp) *NullableJscode2sessionRsp {
	return &NullableJscode2sessionRsp{value: val, isSet: true}
}

func (v NullableJscode2sessionRsp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJscode2sessionRsp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
